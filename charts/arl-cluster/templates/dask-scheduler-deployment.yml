apiVersion: v1
kind: Service
metadata:
  name: dask-scheduler-{{ template "arl-cluster.name" . }}-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: dask-scheduler-{{ template "arl-cluster.name" . }}
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/managed-by: "{{ .Release.Service }}"
    helm.sh/chart: "{{ template "arl-cluster.chart" . }}"
spec:
  selector:
    app.kubernetes.io/name:  dask-scheduler-{{ template "arl-cluster.name" . }}
    app.kubernetes.io/instance: "{{ .Release.Name }}"
  type: {{ .Values.daskscheduler.service.type }}
  ports:
  - name: scheduler
    port: {{ .Values.daskscheduler.service.scheduler.port }}
    targetPort: scheduler
    protocol: TCP
  - name: bokeh
    port: {{ .Values.daskscheduler.service.bokeh.port }}
    targetPort: bokeh
    protocol: TCP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dask-scheduler-{{ template "arl-cluster.name" . }}-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: dask-scheduler-{{ template "arl-cluster.name" . }}
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/managed-by: "{{ .Release.Service }}"
    helm.sh/chart: "{{ template "arl-cluster.chart" . }}"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: dask-scheduler-{{ template "arl-cluster.name" . }}
      app.kubernetes.io/instance: "{{ .Release.Name }}"
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dask-scheduler-{{ template "arl-cluster.name" . }}
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        app.kubernetes.io/managed-by: "{{ .Release.Service }}"
        helm.sh/chart: "{{ template "arl-cluster.chart" . }}"
    spec:
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      containers:
      - name: scheduler
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
          - /usr/local/bin/start-dask-scheduler.sh
        env:
          - name: DASK_HOST_NAME
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: DASK_SCHEDULER
            value: dask-scheduler-{{ template "arl-cluster.name" . }}-{{ .Release.Name }}.{{ .Release.Namespace }}
          - name: DASK_PORT_SCHEDULER
            value: "8786"
          - name: DASK_PORT_BOKEH
            value: "8787"
          - name: DASK_BOKEH_WHITELIST
            value: dask-scheduler-{{ template "arl-cluster.name" . }}-{{ .Release.Name }}.{{ .Release.Namespace }}
          - name: DASK_BOKEH_APP_PREFIX
            value: "/"
          - name: DASK_LOCAL_DIRECTORY
            value: "/var/tmp"
          - name: K8S_APP_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: DASK_UID
            valueFrom:
              fieldRef:
                fieldPath: metadata.uid
          - name: DASK_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: DASK_SCHEDULER
            value: dask-scheduler-{{ template "arl-cluster.name" . }}-{{ .Release.Name }}.{{ .Release.Namespace }}
          - name: DASK_CPU_LIMIT
            valueFrom:
              resourceFieldRef:
                containerName: scheduler
                resource: limits.cpu
          - name: DASK_MEM_LIMIT
            valueFrom:
              resourceFieldRef:
                containerName: scheduler
                resource: limits.memory
        volumeMounts:
        - mountPath: /var/tmp
          name: localdir
          readOnly: false
        ports:
        - name: scheduler
          containerPort: 8786
        - name: bokeh
          containerPort: 8787
        readinessProbe:
          httpGet:
            path: /json/identity.json
            port: 8787
          initialDelaySeconds: 60
          timeoutSeconds: 10
          periodSeconds: 20
          failureThreshold: 3
      volumes:
      - hostPath:
          path: /var/tmp
          type: DirectoryOrCreate
        name: localdir
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
